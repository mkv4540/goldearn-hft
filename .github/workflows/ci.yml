name: CI - Build and Test

on:
  push:
    branches: [main, develop, day_*]
  pull_request:
    branches: [main, develop]
  workflow_call:
    outputs:
      success_run_attempt:
        value: ${{ jobs.build.outputs.success_run_attempt }}

permissions:
  pull-requests: write
  contents: read

jobs:
  build-and-test:
    name: Build and Test HFT System
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    strategy:
      matrix:
        build_type: [Release, Debug]
        compiler: [gcc, clang]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          
      - name: Setup C++ environment
        uses: aminya/setup-cpp@v1
        with:
          compiler: ${{ matrix.compiler }}
          cmake: true
          ninja: true
          vcpkg: false
          
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libhiredis-dev \
            libpq-dev \
            libzmq3-dev \
            libboost-all-dev \
            libssl-dev \
            libgtest-dev \
            libgmock-dev \
            pkg-config \
            clang-format \
            clang-tidy \
            valgrind
            
      - name: Verify package installation
        run: |
          echo "Checking installed packages:"
          pkg-config --list-all | grep -E "(hiredis|libzmq|libpq|openssl|boost)" || echo "Some packages not found via pkg-config"
          echo "Checking library files:"
          ls -la /usr/lib/x86_64-linux-gnu/libhiredis* || echo "hiredis libraries not found"
          ls -la /usr/lib/x86_64-linux-gnu/libzmq* || echo "zmq libraries not found"
          echo "Checking include files:"
          ls -la /usr/include/hiredis* || echo "hiredis headers not found"
          ls -la /usr/include/zmq* || echo "zmq headers not found"
          
      - name: Install nlohmann/json
        run: |
          # Try to install from package manager first
          if sudo apt-get install -y nlohmann-json3-dev 2>/dev/null; then
            echo "Installed nlohmann-json3-dev from package manager"
          else
            echo "Installing nlohmann/json from source"
            git clone https://github.com/nlohmann/json.git
            cd json
            cmake -E make_directory "build"
            cmake -E chdir "build" cmake -DJSON_BuildTests=OFF -DCMAKE_BUILD_TYPE=Release ../
            cmake --build "build" --config Release
            sudo cmake --build "build" --config Release --target install
            cd ..
          fi
          
      - name: Install jwt-cpp
        run: |
          # Try to install from package manager first
          if sudo apt-get install -y libjwt-dev 2>/dev/null; then
            echo "Installed libjwt-dev from package manager"
          else
            echo "Installing jwt-cpp from source"
            git clone https://github.com/Thalhammer/jwt-cpp.git
            cd jwt-cpp
            cmake -E make_directory "build"
            cmake -E chdir "build" cmake -DCMAKE_BUILD_TYPE=Release ../
            cmake --build "build" --config Release
            sudo cmake --build "build" --config Release --target install
            cd ..
          fi
            
      - name: Install Google Benchmark
        run: |
          git clone https://github.com/google/benchmark.git
          cd benchmark
          cmake -E make_directory "build"
          cmake -E chdir "build" cmake -DBENCHMARK_DOWNLOAD_DEPENDENCIES=on -DCMAKE_BUILD_TYPE=Release ../
          cmake --build "build" --config Release
          sudo cmake --build "build" --config Release --target install
          
      - name: Configure CMake
        run: |
          echo "Configuring CMake for ${{ matrix.build_type }} with ${{ matrix.compiler }}"
          echo "Current directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          echo "CMake version:"
          cmake --version
          echo "Configuring build..."
          cmake -B build \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DBUILD_TESTS=ON \
            -DBUILD_BENCHMARKS=ON \
            -DENABLE_SANITIZERS=${{ matrix.build_type == 'Debug' && 'ON' || 'OFF' }} \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
            -DCMAKE_VERBOSE_MAKEFILE=ON \
            -DCMAKE_FIND_DEBUG_MODE=ON
          echo "CMake configuration completed"
          echo "Build directory contents:"
          ls -la build/
            
      - name: Build HFT System
        run: |
          echo "Starting build with ${{ matrix.compiler }} for ${{ matrix.build_type }}"
          echo "Build directory contents:"
          ls -la build/
          echo "Starting build..."
          cmake --build build --parallel $(nproc) --verbose
          echo "Build completed successfully"
          
      - name: Run Unit Tests
        run: |
          cd build
          ctest --output-on-failure --parallel $(nproc) --timeout 300
          
      - name: Run Integration Tests
        if: matrix.build_type == 'Release'
        run: |
          cd build
          # Run integration test suite if it exists
          if [ -f "./tests/test_integration_suite" ]; then
            ./tests/test_integration_suite
          fi
          
      - name: Run Performance Tests
        if: matrix.build_type == 'Release'
        run: |
          cd build
          # Run performance regression tests if they exist
          if [ -f "./tests/test_performance_regression" ]; then
            ./tests/test_performance_regression
          fi
          
      - name: Code Coverage (Debug only)
        if: matrix.build_type == 'Debug' && matrix.compiler == 'gcc'
        run: |
          sudo apt-get install -y gcovr
          cmake --build build --target coverage || echo "Coverage target not available"
          
      - name: Static Analysis
        if: matrix.compiler == 'clang'
        run: |
          cmake --build build --target lint || echo "Lint target not available"
          
      - name: Memory Check (Debug only)
        if: matrix.build_type == 'Debug' && matrix.compiler == 'gcc'
        run: |
          cd build
          # Run memory checks on core components
          if [ -f "./goldearn_engine" ]; then
            timeout 60s valgrind --tool=memcheck --leak-check=summary --error-exitcode=1 \
              ./goldearn_engine --help || echo "Memory check completed with warnings"
          fi
          
      - name: Security Scan
        uses: securecodewarrior/github-action-add-sarif@v1
        with:
          sarif-file: 'security-scan-results.sarif'
        continue-on-error: true
        
      - name: Upload build artifacts
        if: matrix.build_type == 'Release' && matrix.compiler == 'gcc'
        uses: actions/upload-artifact@v4
        with:
          name: goldearn-hft-binaries
          path: |
            build/goldearn_*
            !build/**/*.o
            !build/**/*.a
          retention-days: 7
          
      - name: Performance Benchmark
        if: matrix.build_type == 'Release' && matrix.compiler == 'gcc'
        run: |
          cd build
          # Run benchmarks if available
          find . -name "*_benchmark" -executable -type f | head -3 | while read bench; do
            echo "Running benchmark: $bench"
            timeout 120s "$bench" --benchmark_format=json --benchmark_out=benchmark_results.json || true
          done
          
      - name: HFT System Health Check
        if: matrix.build_type == 'Release'
        run: |
          cd build
          # Basic smoke test for HFT components
          echo "Testing HFT system health..."
          if [ -f "./goldearn_engine" ]; then
            timeout 30s ./goldearn_engine --version 2>/dev/null || echo "Engine version check completed"
          fi
          if [ -f "./goldearn_feed_handler" ]; then
            timeout 30s ./goldearn_feed_handler --help 2>/dev/null || echo "Feed handler help completed"
          fi
          if [ -f "./goldearn_risk_monitor" ]; then
            timeout 30s ./goldearn_risk_monitor --help 2>/dev/null || echo "Risk monitor help completed"
          fi