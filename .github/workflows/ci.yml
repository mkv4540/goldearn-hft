name: CI - Build and Test

on:
  push:
    branches: [main, develop, day_*]
  pull_request:
    branches: [main, develop]

permissions:
  contents: read

jobs:
  build-and-test:
    name: Build and Test HFT System
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    strategy:
      matrix:
        build_type: [Release, Debug]
        compiler: [gcc, clang]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          
      - name: Setup C++ environment
        uses: aminya/setup-cpp@v1
        with:
          compiler: ${{ matrix.compiler }}
          cmake: true
          ninja: true
          vcpkg: false
          
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libhiredis-dev \
            libpq-dev \
            libzmq3-dev \
            libboost-all-dev \
            libssl-dev \
            libgtest-dev \
            libgmock-dev \
            pkg-config \
            clang-format \
            clang-tidy \
            valgrind \
            build-essential
            
      - name: Verify package installation
        run: |
          echo "=== Verifying package installation ==="
          echo "Checking installed packages:"
          pkg-config --list-all | grep -E "(hiredis|libzmq|libpq|openssl|boost)" || echo "Some packages not found via pkg-config"
          echo "Checking library files:"
          ls -la /usr/lib/x86_64-linux-gnu/libhiredis* || echo "hiredis libraries not found"
          ls -la /usr/lib/x86_64-linux-gnu/libzmq* || echo "zmq libraries not found"
          echo "Checking include files:"
          ls -la /usr/include/hiredis* || echo "hiredis headers not found"
          ls -la /usr/include/zmq* || echo "zmq headers not found"
          
      - name: Install nlohmann/json
        run: |
          echo "=== Installing nlohmann/json ==="
          # Try to install from package manager first
          if sudo apt-get install -y nlohmann-json3-dev 2>/dev/null; then
            echo "âœ… Installed nlohmann-json3-dev from package manager"
          else
            echo "ðŸ“¦ Installing nlohmann/json from source"
            git clone https://github.com/nlohmann/json.git
            cd json
            cmake -E make_directory "build"
            cmake -E chdir "build" cmake -DJSON_BuildTests=OFF -DCMAKE_BUILD_TYPE=Release ../
            cmake --build "build" --config Release
            sudo cmake --build "build" --config Release --target install
            cd ..
            echo "âœ… nlohmann/json installed from source"
          fi
          
      - name: Install jwt-cpp
        run: |
          echo "=== Installing jwt-cpp ==="
          # Try to install from package manager first
          if sudo apt-get install -y libjwt-dev 2>/dev/null; then
            echo "âœ… Installed libjwt-dev from package manager"
          else
            echo "ðŸ“¦ Installing jwt-cpp from source"
            git clone https://github.com/Thalhammer/jwt-cpp.git
            cd jwt-cpp
            cmake -E make_directory "build"
            cmake -E chdir "build" cmake -DCMAKE_BUILD_TYPE=Release ../
            cmake --build "build" --config Release
            sudo cmake --build "build" --config Release --target install
            cd ..
            echo "âœ… jwt-cpp installed from source"
          fi
            
      - name: Configure CMake
        run: |
          echo "=== Configuring CMake ==="
          echo "Build type: ${{ matrix.build_type }}"
          echo "Compiler: ${{ matrix.compiler }}"
          echo "Current directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          echo "CMake version:"
          cmake --version
          echo "Configuring build..."
          cmake -B build \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DBUILD_TESTS=ON \
            -DBUILD_BENCHMARKS=OFF \
            -DENABLE_SANITIZERS=${{ matrix.build_type == 'Debug' && 'ON' || 'OFF' }} \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
            -DCMAKE_VERBOSE_MAKEFILE=ON
          echo "âœ… CMake configuration completed"
          echo "Build directory contents:"
          ls -la build/
          
      - name: Build HFT System
        run: |
          echo "=== Building HFT System ==="
          echo "Starting build with ${{ matrix.compiler }} for ${{ matrix.build_type }}"
          echo "Build directory contents:"
          ls -la build/
          echo "Starting build..."
          cmake --build build --parallel $(nproc) --verbose
          echo "âœ… Build completed successfully"
          
      - name: Run Unit Tests
        run: |
          echo "=== Running Unit Tests ==="
          cd build
          echo "Running unit tests..."
          ctest --output-on-failure --parallel $(nproc) --timeout 300
          echo "âœ… Unit tests completed"
          
      - name: Lint Modified Code
        if: github.event_name == 'pull_request'
        run: |
          echo "=== Linting Modified Code ==="
          echo "Linting modified C++ files..."
          # Get list of modified C++ files
          git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | grep -E '\.(cpp|hpp)$' > modified_files.txt || echo "No C++ files modified"
          
          if [ -s modified_files.txt ]; then
            echo "Modified C++ files:"
            cat modified_files.txt
            
            # Run clang-format check on modified files
            echo "Checking code formatting..."
            while IFS= read -r file; do
              if [ -f "$file" ]; then
                echo "Checking format of: $file"
                clang-format --dry-run --Werror "$file" || echo "Formatting issues found in $file"
              fi
            done < modified_files.txt
            
            # Run clang-tidy on modified files
            echo "Running static analysis on modified files..."
            cd build
            while IFS= read -r file; do
              if [ -f "../$file" ]; then
                echo "Analyzing: $file"
                clang-tidy "../$file" -p . --quiet || echo "Static analysis issues found in $file"
              fi
            done < ../modified_files.txt
            cd ..
            echo "âœ… Modified code linting completed"
          else
            echo "No C++ files to lint"
          fi
          
      - name: Full Code Linting
        if: matrix.compiler == 'clang' && matrix.build_type == 'Release'
        run: |
          echo "=== Full Code Linting ==="
          echo "Running comprehensive code quality checks..."
          cd build
          
          # Run clang-format on all source files
          echo "Checking code formatting for all files..."
          find ../src -name "*.cpp" -o -name "*.hpp" | while read file; do
            echo "Checking format of: $file"
            clang-format --dry-run --Werror "$file" || echo "Formatting issues found in $file"
          done
          
          # Run clang-tidy on all source files
          echo "Running comprehensive static analysis..."
          find ../src -name "*.cpp" -o -name "*.hpp" | while read file; do
            echo "Analyzing: $file"
            clang-tidy "$file" -p . --quiet || echo "Static analysis issues found in $file"
          done
          
          echo "âœ… Full code linting completed"
          
      - name: Upload build artifacts
        if: matrix.build_type == 'Release' && matrix.compiler == 'gcc'
        uses: actions/upload-artifact@v4
        with:
          name: goldearn-hft-binaries-${{ matrix.compiler }}
          path: |
            build/goldearn_*
            !build/**/*.o
            !build/**/*.a
          retention-days: 7