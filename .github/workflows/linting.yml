name: Linting

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    name: Code Quality Check
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install linting tools
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            clang-format-15 \
            clang-tidy-15 \
            cppcheck \
            cmake \
            ninja-build \
            gcc-12 \
            g++-12 \
            nlohmann-json3-dev

      - name: Check code formatting
        run: |
          echo "Checking code formatting..."
          find src tests -name "*.cpp" -o -name "*.hpp" -o -name "*.h" | \
          xargs clang-format-15 --dry-run --Werror

      - name: Create simple CMakeLists.txt for linting
        run: |
          # Create minimal CMakeLists.txt for linting
          cat > CMakeLists.txt << 'EOF'
          cmake_minimum_required(VERSION 3.20)
          project(GoldEarn_HFT_Lint VERSION 1.0.0 LANGUAGES CXX)
          
          set(CMAKE_CXX_STANDARD 20)
          set(CMAKE_CXX_STANDARD_REQUIRED ON)
          
          find_package(Threads REQUIRED)
          find_package(OpenSSL REQUIRED)
          
          # Simple library for linting
          add_library(goldearn_lint STATIC 
            src/utils/logger.cpp
            src/core/latency_tracker.cpp
          )
          target_include_directories(goldearn_lint PUBLIC ${CMAKE_SOURCE_DIR}/src)
          target_link_libraries(goldearn_lint Threads::Threads OpenSSL::SSL OpenSSL::Crypto)
          EOF


      - name: Configure for static analysis
        run: |
          cmake -B build \
            -DCMAKE_BUILD_TYPE=Debug \
            -DCMAKE_CXX_STANDARD=20 \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
            -G Ninja

      - name: Build for analysis
        run: |
          cmake --build build --parallel 2

      - name: Run clang-tidy
        run: |
          echo "Running clang-tidy analysis..."
          find src -name "*.cpp" | head -5 | xargs clang-tidy-15 -p build

      - name: Run cppcheck
        run: |
          echo "Running cppcheck analysis..."
          cppcheck --enable=all --std=c++20 --suppress=missingIncludeSystem \
            --suppress=unusedFunction --error-exitcode=1 src/